<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>褪色的零</title>
  
  <subtitle>愿将腰下剑，只为斩楼兰</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-21T01:55:34.436Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hk27xing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/10/21/index/"/>
    <id>http://yoursite.com/2020/10/21/index/</id>
    <published>2020-10-21T01:55:34.436Z</published>
    <updated>2020-10-21T01:55:34.436Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【算法与数据结构 02】树的引入</title>
    <link href="http://yoursite.com/2020/10/08/%E3%80%90%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2002%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BC%95%E5%85%A5/"/>
    <id>http://yoursite.com/2020/10/08/%E3%80%90%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2002%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BC%95%E5%85%A5/</id>
    <published>2020-10-08T08:07:02.000Z</published>
    <updated>2020-10-21T03:18:48.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【算法与数据结构-02】二叉树的引入"><a href="#【算法与数据结构-02】二叉树的引入" class="headerlink" title="【算法与数据结构 02】二叉树的引入"></a>【算法与数据结构 02】二叉树的引入</h1><hr><p>相信大家对于树都不会太陌生，今天就来简单聊聊关于数据结构中的树的那些东西吧~</p><p>[toc]</p><hr><h2 id="一、树的简单介绍"><a href="#一、树的简单介绍" class="headerlink" title="一、树的简单介绍"></a>一、树的简单介绍</h2><h3 id="1-1-什么是树？"><a href="#1-1-什么是树？" class="headerlink" title="1.1 什么是树？"></a>1.1 什么是树？</h3><blockquote><p>先来看看百度百科上对树的解释</p></blockquote><p>树状图是一种数据结构，它是由<code>n(n &gt;= 1)</code> 个有限结点组成一个具有层次关系的集合</p><p>把它叫做 “树” 是因为它看起来像一颗倒挂的树，也就是说它是根朝上，而叶朝下</p><p>它大多长这样：</p><img src="C:\Users\PC\AppData\Roaming\Typora\typora-user-images\image-20201015093244111.png" alt="image-20201015093244111" /><blockquote><p>再来看看一些结点的称呼或是概念性的东西</p></blockquote><ul><li>A 结点是 B 和 C 结点的上级，也就是说 A 结点是 B 和 C 结点的<code>父节点</code>，B 和 C 结点是 A 结点的<code>子结点</code></li><li>B 和 C 结点同时是 A 结点的子结点，称为<code>兄弟结点</code></li><li>A 结点没有父节点，称为<code>根节点</code></li><li>D 、E 和 F 结点没有子结点，称为<code>叶子节点</code></li><li><code>树深</code>即为树中结点的最大层次数（也称<code>高度</code>，<code>深度</code>），如图深度即为 3</li></ul><p>可以看出，树由根结点和若干颗子树构成，换句话说，剔除一颗树的根节点后，它的子结构也满足树的特性：</p><ul><li>每个结点有零个或多个结点</li><li>每个非根结点有且仅有一个父节点</li><li>树里面没有环路</li></ul><blockquote><p>提到树就不得不说起二叉树了</p></blockquote><h3 id="1-2-什么是二叉树"><a href="#1-2-什么是二叉树" class="headerlink" title="1.2 什么是二叉树"></a>1.2 什么是二叉树</h3><p>二叉树：每个结点最多含有两个结点的树，两个结点分别为左子结点和右子结点</p><blockquote><p>来看看一个二叉树的简单实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">TreeNode left;</span><br><span class="line">TreeNode right;</span><br><span class="line">TreeNode() &#123;&#125;</span><br><span class="line">TreeNode(<span class="keyword">int</span> val) &#123; <span class="keyword">this</span>.val = val; &#125;</span><br><span class="line">TreeNode(<span class="keyword">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line"><span class="keyword">this</span>.val = val;</span><br><span class="line"><span class="keyword">this</span>.left = left;</span><br><span class="line"><span class="keyword">this</span>.right = right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二叉树当中也有几种特殊的类型：</p><ul><li>满二叉树：所有结点都有两个子结点（当然除开最后一层的叶子结点）</li></ul><p><img src="C:%5CUsers%5CPC%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201015093535696.png" alt="image-20201015093535696"></p><ul><li>完全二叉树：除最后一层结点个数都达到最大，并且最后一层的叶子结点都往左排列</li></ul><p><img src="C:%5CUsers%5CPC%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201015093753210.png" alt="image-20201015093753210"></p><p>（从定义可以发现，一个满二叉树一定是完全二叉树）</p><p>之所以会称为完全二叉树，是从它存储空间利用率来看的</p><p>比如上面的完全二叉树：</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td></td><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td><td>F</td><td>G</td><td>H</td></tr></tbody></table><p>如果这里是一颗非完全二叉树，则会浪费比较多的存储空间：</p><p><img src="C:%5CUsers%5CPC%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201017100341977.png" alt="image-20201017100341977"></p><table><thead><tr><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th></tr></thead><tbody><tr><td align="center"></td><td align="center">A</td><td align="center">B</td><td align="center">C</td><td align="center">D</td><td align="center">E</td><td align="center"></td><td align="center">F</td></tr><tr><td align="center">8</td><td align="center">9</td><td align="center">10</td><td align="center">11</td><td align="center">12</td><td align="center">13</td><td align="center">14</td><td align="center">15</td></tr><tr><td align="center">G</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">H</td><td align="center">I</td></tr></tbody></table><ul><li><p>二叉搜索树：满足下列约束条件：</p><ol><li>若左子树不为空，则左子树上所有结点的值均小于它的根节点的值</li><li>若右子树不为空，则右子树上所有结点的值均大于它的根节点的值</li><li>左、右子树也必须是二叉搜索树</li></ol></li></ul><p><img src="C:%5CUsers%5CPC%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201018112451980.png" alt="image-20201018112451980"></p><p>二叉查找树中，会尽可能避免两个结点数值相等的情况</p><blockquote><p>二叉查找树也有几种优化，例如 AVL 树、红黑树、哈夫曼树 … 之后再做介绍</p></blockquote><h2 id="二、二叉树的遍历方式"><a href="#二、二叉树的遍历方式" class="headerlink" title="二、二叉树的遍历方式"></a>二、二叉树的遍历方式</h2><p>二叉树的遍历是指从根结点触发，按照某种次序依次访问二叉树中所有结点，使得每个结点被访问且仅被访问一次</p><p>二叉树的遍历方式大体上有四种经典方式：前序遍历、中序遍历、后序遍历、层序遍历</p><blockquote><p>其中前序、中序和后序遍历本质上可以认为是深度优先遍历（DFS），而二叉树的层序遍历本质上可以认为是广度优先遍历（BFS），这里不作详细介绍，想了解的朋友可以期待下一篇文章哦~</p><p>DFS 简单来说就是对每一个可能的分支路径深入到最底的遍历方式；而 BFS 简单来说就是一层一层由内而外的遍历方式</p></blockquote><ul><li><p>前序遍历：对于树中的任意结点，先打印这个结点，然后前序遍历它的左子树，最后前序遍历它的右子树</p></li><li><p>中序遍历：对于树中的任意结点，先中序遍历它的左子树，然后打印这个结点，最后中序遍历它的右子树</p></li><li><p>后序遍历：对于树中的任意结点，先后序遍历它的左子树，然后 后序遍历它的右子树，最后打印这个结点</p><p>（也就是说，这里的序指的是父节点的遍历顺序）</p></li></ul><p><img src="https://raw.githubusercontent.com/hk27xing/Figurebed/master/img/20201018110009.png" alt=""></p><blockquote><p>实现前序、中序和后序遍历普遍用的还是递归，个人觉得递归相比非递归的方法更妙一些~，下面贴出代码片段方便大家理解</p></blockquote><p>其实这三种遍历方式有很大的相同之处，正如它们的定义一般</p><h3 id="2-1-前序遍历"><a href="#2-1-前序遍历" class="headerlink" title="2.1 前序遍历"></a>2.1 前序遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderTraversal</span><span class="params">(TreeNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(head.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    preOrderTraversal(head.left);</span><br><span class="line">    preOrderTraversal(head.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-中序遍历"><a href="#2-2-中序遍历" class="headerlink" title="2.2 中序遍历"></a>2.2 中序遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrderTraversal</span><span class="params">(TreeNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inOrderTraversal(head.left);</span><br><span class="line">    System.out.print(head.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    inOrderTraversal(head.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里额外提一下二叉查找树的中序遍历：</p><p>对二叉查找树进行中序遍历，就可以输出一个按数值从小到大的有序数据队列（这里就直接拿上面的图吧，偷懒~）</p><p><img src="C:%5CUsers%5CPC%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201018112459715.png" alt="image-20201018112459715"></p><p>比如这里就会打印出：9、13、15、16、18、21、23、25</p><h3 id="2-3-后序遍历"><a href="#2-3-后序遍历" class="headerlink" title="2.3 后序遍历"></a>2.3 后序遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrderTraversal</span><span class="params">(TreeNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    postOrderTraversal(head.left);</span><br><span class="line">    postOrderTraversal(head.right);</span><br><span class="line">    System.out.print(head.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-层序遍历"><a href="#2-4-层序遍历" class="headerlink" title="2.4 层序遍历"></a>2.4 层序遍历</h3><p>层序遍历就像上面所提到的那样，即逐层的、从左到右访问所有结点</p><p><img src="https://raw.githubusercontent.com/hk27xing/Figurebed/master/img/20201018115011.png" alt=""></p><p>层序遍历的实现可以使用队列的特性，把每个还没有访问到的结点依次放入队列，然后再弹出队列的头部元素当作是当前的结点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(TreeNode head)</span></span>&#123;</span><br><span class="line">LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.offer(head);</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">TreeNode cur = queue.poll();</span><br><span class="line">System.out.print(cur.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(cur.left != <span class="keyword">null</span>) queue.add(cur.left);</span><br><span class="line"><span class="keyword">if</span>(cur.right != <span class="keyword">null</span>) queue.add(cur.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用队列保存每层的所有结点，每次把队列里原先的所有结点进行出队列操作，再把每个元素的非空左右子节点入队，即可得到每层的遍历</p><hr><blockquote><p>时隔五个月左右自己又有了写博客的想法，希望自己能一直坚持下去，另外，朋友们的点赞和关注是对我最大的支持 :D</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;【算法与数据结构-02】二叉树的引入&quot;&gt;&lt;a href=&quot;#【算法与数据结构-02】二叉树的引入&quot; class=&quot;headerlink&quot; title=&quot;【算法与数据结构 02】二叉树的引入&quot;&gt;&lt;/a&gt;【算法与数据结构 02】二叉树的引入&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;相
      
    
    </summary>
    
    
    
      <category term="-数据结构 -树" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【算法与数据结构 01】动态规划之引入</title>
    <link href="http://yoursite.com/2020/04/09/%E3%80%90%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2001%E3%80%91%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E5%BC%95%E5%85%A5/"/>
    <id>http://yoursite.com/2020/04/09/%E3%80%90%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2001%E3%80%91%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E5%BC%95%E5%85%A5/</id>
    <published>2020-04-09T08:31:51.000Z</published>
    <updated>2020-10-21T03:13:55.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【算法与数据结构-01】动态规划之引入"><a href="#【算法与数据结构-01】动态规划之引入" class="headerlink" title="【算法与数据结构 01】动态规划之引入"></a>【算法与数据结构 01】动态规划之引入</h1><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>前几天在力扣刷题时遇到了动态规划的问题，看了题解之后有些兴趣便自己下去多了解了一下，在此分享给大家（另外给的例题都是自己做过的，然后思考了下顺便分享下，希望大家喜欢~）</p></blockquote><p>本篇博客将分为两个部分：</p><ul><li>对动态规划进行阐述</li><li>配合一些动态规划的题目进一步了解</li></ul><p>那么接下来就让我们开始吧~</p><hr><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>动态规划（Dynamic programming，简称 DP）中本阶段的状态往往是上一阶段状态和上一阶段决策的结果。换言之就是原问题可以拆解成若干个子问题，而这些子问题又可拆解……最后可以由初始问题的解来推出原问题的解。</p><p>而这之中拆解的过程又是耐人寻味的且有趣的。</p><h3 id="使用要素（划重点！）"><a href="#使用要素（划重点！）" class="headerlink" title="使用要素（划重点！）"></a>使用要素（划重点！）</h3><ul><li>最优子结构：如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。换言之，总问题包含很多个子问题，而这些子问题的解也是最优的。</li><li>子问题的重叠性：子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。而动态规划利用了这个性质，对每一个子问题都计算一次，将结果保存在一个表格中（例如数组），之后要用的时候取出来就行，就不必再重新计算，提高了效率。</li></ul><p>也许到这你还是对动态规划不是很理解，那么就来谈谈这当中的经典问题：爬楼梯</p><blockquote><p>假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p></blockquote><p>初看觉得可以用排列组合来解，但那样的话n 越大越难解，效率也会很低</p><p>这时就要提到动态规划了：</p><p><code>n</code>阶台阶可以分为<code>n-1</code>阶台阶走一阶台阶和<code>n-2</code>阶台阶走两步，所以，<code>n</code>阶台阶的走法就是<code>n-1</code>阶台阶走法加上<code>n-2</code>阶台阶走法。这时可得状态转移方程：<code>F(n) = F(n-1) + F(n-2) (n &gt;= 3)</code>（这里如果是<code>n-2</code>阶台阶走1 1 两次的话，又会回到<code>n-1</code>阶台阶上）</p><p>将原问题进行拆解，也就是随着n 的减少，到最后剩下1阶台阶和2阶台阶，而1阶台阶只能是走1步，2阶台阶可以是1 1 走两次和走2步到，所以可得<code>F(1) = 1, F(2) = 2</code>，这就是问题的边界</p><p>可以看出，从最开始的问题解可以逐渐推出最终问题的解，妙啊~</p><p>所以动态规划问题的精髓就在于状态转移方程</p><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><h3 id="LeetCode-面试题-17-16-按摩师"><a href="#LeetCode-面试题-17-16-按摩师" class="headerlink" title="LeetCode 面试题 17.16. 按摩师"></a>LeetCode <a href="https://leetcode-cn.com/problems/the-masseuse-lcci/">面试题 17.16. 按摩师</a></h3><p><img src="https://raw.githubusercontent.com/hk27xing/Figurebed/master/img/20200504223538.png" alt=""></p><p>初看完题目，可以确定的是一个状态<em>所能达到的最长总时间</em>与之前两个状态和本状态的分钟数有关</p><p>观察题目，因为是不能接收相邻的预约，而且预约的总时间要最长，所以第<code>i</code>次、第<code>i-1</code>次和第<code>i-2</code>次预约就有了关系：</p><ul><li>如果接收第<code>i</code>次预约，那么第<code>i-1</code>次预约就休息，此时<code>i-2</code>次预约<em>所能达到的最长总时间</em> 加上第<code>i</code>次预约的时间<code>nums[i]</code>就得大于第<code>i-1</code>次预约<em>所能达到的最长总时间</em></li><li>如果不接受第<code>i</code>次预约，那么第<code>i-1</code>次预约的状态就不确定（由<code>i-1</code>次预约前的总时间数确定，但<code>i-1</code>次预约<em>所能达到的最长总时间数</em> 是可以确定的），此时<code>i-2</code>次预约<em>所能达到的最长总时间</em> 加上第<code>i</code>次预约的时间<code>nums[i]</code>就得小于第<code>i-1</code>次预约<em>所能达到的最长总时间</em></li></ul><p>定义<code>dp[i]</code>为<code>[0,i]</code>区间内预约所能达到的最长总时间数</p><p>所以这时的状态转移方程就为<code>dp[i] = max(dp[i-2] + nums[i], dp[i-1])</code></p><p>随着i 的减少，最后来到了边界上：<code>i = 0</code>和<code>i = 1</code>（<code>i = 2</code>即可由这两个值所得出）</p><ul><li><code>i = 0</code>时，因为之前没有总时间数所限制，此时<code>dp[0] = nums[0]</code></li><li><code>i = 1</code>时，因为和<code>i = 0</code>是相邻的，此时<code>dp[1] = max(nums[0], nums[1])</code></li></ul><p>到这里本题差不多就解完了，再贴出部分代码以帮助大家理解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len = nums.length;</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; len;i++)&#123;</span><br><span class="line">dp[i] = Math.max(dp[i-<span class="number">1</span>], dp[i-<span class="number">2</span>] + nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LeetCode-32-最长有效括号"><a href="#LeetCode-32-最长有效括号" class="headerlink" title="LeetCode 32. 最长有效括号"></a>LeetCode <a href="https://leetcode-cn.com/problems/longest-valid-parentheses/">32. 最长有效括号</a></h3><p><img src="https://raw.githubusercontent.com/hk27xing/Figurebed/master/img/20200504223732.png" alt=""></p><p>这里先解释一下有效括号字符串：仅由 <code>&quot;(&quot;</code> 和 <code>&quot;)&quot;</code> 构成的字符串，对于每个左括号，都能找到与之对应的右括号，反之亦然。换句话说，一个有效括号是由<code>&quot;)&quot;</code>结尾的。</p><p>要注意的是题目找的是最长的有效括号的子串，也就是说满足定义的子串如果不连续就只需要最长的，举个例子：<code>&quot;()))()())&quot;</code>，这里应该输出4。</p><p>根据题目给的例子可以看到，遇到<code>&quot;......()&quot;</code>这样的，最长有效括号长度就加2，另外可能还有<code>&quot;......(())&quot;</code>这样的，也是满足有效括号的定义的，这里就直接加4。</p><p>可以发现，当前元素为<code>&quot;(&quot;</code>时，有效括号长度并不会发生变化，因此可以从<code>&quot;)&quot;</code>寻找出dp方程的一个关系，这里可以定义<code>dp[i]</code>的值为以第<code>i</code>个元素结尾时，最长有效括号子字符串的长度，这样的话就会出现两种情况（这里为了简化，<code>dp[i]</code>为<code>&quot;(&quot;</code>时，其值就直接为 0）：</p><ul><li><p>当元素<code>&quot;)&quot;</code>前一个元素为<code>&quot;(&quot;</code>时，也就是形如<code>&quot;......()&quot;</code>这样的子字符串，可以推出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i] = dp[i - <span class="number">2</span>] + <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>当元素<code>&quot;)&quot;</code>前一个元素为<code>&quot;)&quot;</code>时，也就是形如<code>&quot;......))&quot;</code>这样的子字符串。这里就要稍微复杂些，因为还要考虑前一个<code>&quot;)&quot;</code>的情况。假设这样的子字符串是一个更长的有效子字符串的一部分，那么前面就有与之对应的<code>&quot;(&quot;</code>，那么再前面的呢，又怎么去找？</p><p>假设成立的情况下，这时的子字符串就类似于这样<code>&quot;...((...))&quot;</code>，而中间一定会出现<code>&quot;...()...&quot;</code>这样的子串，这时就回到了第一种情况，于是就可以通过<code>&quot;...()...&quot;</code>中的<code>&quot;)&quot;</code>来推出下一个元素<code>&quot;)&quot;</code>的<code>dp[i]</code>的值。仔细想想，由于是第一种情况推出来的，那么<code>&quot;......))&quot;</code>这里前一个元素<code>&quot;)&quot;</code>的<code>dp[i]</code>的值就意味着以它结尾的子串<code>&quot;...(...)&quot;</code>的有效子字符串的长度。</p><p>想到这里，就可以去找出前面的有效子串的长度了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i] = dp[i - dp[i-<span class="number">1</span>] - <span class="number">2</span>] + dp[i-<span class="number">1</span>] + <span class="number">2</span></span><br></pre></td></tr></table></figure><p>这里举个例子方便去理解：</p><table><thead><tr><th align="center"><code>i</code></th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th></tr></thead><tbody><tr><td align="center"><code>s[i]</code></td><td align="center"><code>(</code></td><td align="center"><code>(</code></td><td align="center"><code>)</code></td><td align="center"><code>(</code></td><td align="center"><code>(</code></td><td align="center"><code>)</code></td><td align="center"><code>)</code></td></tr><tr><td align="center"><code>dp[i]</code></td><td align="center">0</td><td align="center">0</td><td align="center">2</td><td align="center">0</td><td align="center">0</td><td align="center">2</td><td align="center">6</td></tr></tbody></table><p>如果你想问假设出现很多个<code>&quot;......))))))&quot;</code>这样的情况的话，其实这都是第二种情况的递推，或者说第二种情况是该情况的子问题</p><p><img src="https://raw.githubusercontent.com/hk27xing/Figurebed/master/img/20200502214412.png" alt=""></p></li></ul><p>到这里本题差不多就解完了，但要注意越界的问题，这里贴出部分代码以帮助大家理解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length(), max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i-<span class="number">1</span>) == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                    dp[i] = (i &gt;= <span class="number">2</span> ? dp[i-<span class="number">2</span>] : <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i - dp[i-<span class="number">1</span>] &gt; <span class="number">0</span> &amp;&amp; s.charAt(i - dp[i-<span class="number">1</span>] - <span class="number">1</span>) == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                    dp[i] = ((i - dp[i-<span class="number">1</span>]) &gt;= <span class="number">2</span> ? dp[i - dp[i-<span class="number">1</span>] - <span class="number">2</span>] : <span class="number">0</span>) + dp[i-<span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                max = Math.max(max, dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LeetCode72-编辑距离"><a href="#LeetCode72-编辑距离" class="headerlink" title="LeetCode72. 编辑距离"></a>LeetCode<a href="https://leetcode-cn.com/problems/edit-distance/">72. 编辑距离</a></h3><p><img src="https://raw.githubusercontent.com/hk27xing/Figurebed/master/img/20200504114227.png" alt=""></p><p>初看完这道题，我自己的想法是直接嵌套循环去找不同，但那些显然不合适（也不说写得出来不，时间估计都超了）</p><p><img src="https://raw.githubusercontent.com/hk27xing/Figurebed/master/img/20200504_2.jpg" alt=""></p><p>这道题其实在于怎么去寻找子问题，从而将原问题进行拆解：这一状态可以看成是由上一状态经过插入、删除、替换操作转换过来的</p><p>另外可以发现使用一维的<code>dp[]</code>不好去定义它，所以这里可以用二维的<code>dp[][]</code>，那么这里<code>dp[i][j]</code>就代表<code>word1</code>中从头到<code>i</code>位置的部分 转换成 <code>word2</code>中从头到<code>j</code>位置的部分 所需要的最少操作数</p><p>将原问题进行拆解，拆解成子问题，子问题再进行拆解…那么初始情况又怎么去找呢，也就是边界怎么去确定呢：考虑到<code>word1</code>或者<code>word2</code>可能为空字符的情况，这里放一张表方便大家去理解（这里借由实例1，给出部分数据，以下讨论也是建立在实例1的基础上）</p><table><thead><tr><th align="center"></th><th align="center"><code>&#39;&#39;</code></th><th align="center"><code>r</code></th><th align="center"><code>o</code></th><th align="center"><code>s</code></th></tr></thead><tbody><tr><td align="center"><code>&#39;&#39;</code></td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td></tr><tr><td align="center"><code>h</code></td><td align="center">1</td><td align="center">◆1</td><td align="center">▼2</td><td align="center"></td></tr><tr><td align="center"><code>o</code></td><td align="center">2</td><td align="center">●2</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><code>r</code></td><td align="center">3</td><td align="center">2</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><code>s</code></td><td align="center">4</td><td align="center">3</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><code>e</code></td><td align="center">5</td><td align="center">4</td><td align="center"></td><td align="center"></td></tr></tbody></table><p><code>&#39;&#39;</code>即为空字符，<code>dp[i][j]</code>的值即为最少操作数（比如说表中那个<code>5</code>即表示<code>horse</code>至少经过5次删除操作后可以得到空字符<code>&#39;&#39;</code>)</p><p>这里还需要确定的是插入、删除、替换 操作怎么通过代码去实现（还请理解不到的朋友们仔细看表格）</p><p>回到给的表格中，可以看到第一个位置为0，意思是两者都为空字符，不需要进行操作，因此操作数为0，如果这时<code>word1</code>和<code>word2</code>的第一个字符相等的话，那么也不需要进行操作，所以这里需要分情况讨论：</p><ul><li><p>当<code>word1[i] == word2[j]</code>的时候，表示最新的一步不需要进行操作，也就是说此时<code>word1[1 ~ i-1]</code>转换成<code>word2[1 ~ j-1]</code>的最少操作数 与 <code>word1[1 ~ i]</code>转换成<code>word2[1 ~ j]</code>的最少操作数是一样的</p><p>所以可以得出：<code>dp[i][j] = dp[i-1][j-1]</code></p></li><li><p>当<code>word1[i] != word2[j]</code>的时候，表示最新的一步需要进行操作：</p><ul><li><p>替换操作：比如说<code>word1</code>第一个字符 与 <code>word2</code>第一个字符 可以直接替换所得（对应表格中打◆的1）</p><p>这里可以得出：<code>dp[i][j] = dp[i-1][j-1] + 1</code></p></li><li><p>删除操作：前面有提到，比如说<code>word1</code>前两个字符<code>ho</code>先是经过一次替换得到<code>ro</code>，要再得到<code>r</code>，则需要一次删除操作（对应表格中打●的2）</p><p>这里可以得到：<code>dp[i][j] = dp[i-1][j] + 1</code></p></li><li><p>插入操作：比如说<code>word1</code>前一个字符<code>h</code>要得到<code>ro</code>，先是<code>h</code>要进行替换得到<code>r</code>，再进行插入操作（对应表格中打▼的2）</p><p>这里可以得到：<code>dp[i][j] = dp[i][j-1] + 1</code></p></li></ul><p>因为要得到最少操作数，所以这里表示为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = Math.min(Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]), dp[i-<span class="number">1</span>][j-<span class="number">1</span>]) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul><p>到这里本题也差不多解完了，这里再贴出部分代码帮助大家理解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = word1.length(), len2 = word2.length();</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len1+<span class="number">1</span>][len2+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len1; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= len2; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] words1 = word1.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] words2 = word2.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= len2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (words1[i-<span class="number">1</span>] == words2[j-<span class="number">1</span>])&#123;</span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.min(Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]), </span><br><span class="line">                                        dp[i-<span class="number">1</span>][j-<span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len1][len2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>所给例题的题解</li><li>程序员小灰—— <a href="https://juejin.im/post/5a29d52cf265da43333e4da7">漫画：什么是动态规划？</a></li></ul><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><blockquote><p>这篇文章自己是二十多天前开始写的，加上自己还不太会写博客，以及老师布置的作业实在是太多了…趁着五一假期还是把它给码完了 QAQ</p><p>创作不易，如果大家喜欢的话可以点个赞 :D</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;【算法与数据结构-01】动态规划之引入&quot;&gt;&lt;a href=&quot;#【算法与数据结构-01】动态规划之引入&quot; class=&quot;headerlink&quot; title=&quot;【算法与数据结构 01】动态规划之引入&quot;&gt;&lt;/a&gt;【算法与数据结构 01】动态规划之引入&lt;/h1&gt;&lt;hr&gt;

      
    
    </summary>
    
    
    
      <category term="-算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java学习之synchronized锁</title>
    <link href="http://yoursite.com/2020/03/04/Java%E5%AD%A6%E4%B9%A0%E4%B9%8Bsynchronized%E9%94%81/"/>
    <id>http://yoursite.com/2020/03/04/Java%E5%AD%A6%E4%B9%A0%E4%B9%8Bsynchronized%E9%94%81/</id>
    <published>2020-03-04T02:00:50.000Z</published>
    <updated>2020-10-21T03:18:27.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java学习之synchronized锁"><a href="#Java学习之synchronized锁" class="headerlink" title="Java学习之synchronized锁"></a>Java学习之synchronized锁</h1><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文章主要对<code>synchronized</code>锁机制进行讲述</p><blockquote><p>本人第一次写博客，如有不足，还请大家包含，谢谢~~</p></blockquote><p>那么接下来就开始吧~</p><hr><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>当多个线程同时进行时，线程的调度是由操作系统决定的，也就是说各个线程执行的先后顺序是无法确定的</p><p>如果多个线程同时读写共享变量，读取的数据就会不一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AddThread add = <span class="keyword">new</span> AddThread();</span><br><span class="line">        DevThread dev = <span class="keyword">new</span> DevThread();</span><br><span class="line">        add.start();</span><br><span class="line">        dev.start();</span><br><span class="line">        add.join();</span><br><span class="line">        dev.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;count = &quot;</span> + Counter.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            Counter.count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            Counter.count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，这里的<code>count</code>从逻辑上来讲应该是0 的</p><p>但多次运行之后可以发现，有时结果会是0，也会出现-259，-1228，422 … 之类很奇怪的数</p><p>要使结果正确，必须保证是原子操作</p><hr><h3 id="原子操作与可见性"><a href="#原子操作与可见性" class="headerlink" title="原子操作与可见性"></a>原子操作与可见性</h3><p>原子操作是指不能被中断的一个或一系列的操作</p><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = i + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这样一个简单的语句其实对应3 个操作：</p><ul><li>读取变量<code>i</code>的值</li><li>进行加1 操作</li><li>将新的值赋值给变量i</li></ul><p>例如上述程序执行时可能会像这样：</p><img src="https://raw.githubusercontent.com/hk27xing/Figurebed/master/img/Thread-synchronized-1.png" style="zoom:67%;float:left" /><p>这样<code>count</code>的值会因为线程执行时被操作系统中断而使得最终结果发生变化</p><p>同时还需要保证可见性：</p><p><strong>可见性</strong>：指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看到被修改的值</p><hr><h2 id="synchronized锁"><a href="#synchronized锁" class="headerlink" title="synchronized锁"></a>synchronized锁</h2><p>通过加锁和解锁的操作，可以保证某一线程执行时，其他线程处于等待状态：</p><img src="https://raw.githubusercontent.com/hk27xing/Figurebed/master/img/Thread-synchronized-2.png" style="zoom:67%;float:left" /><p>使用<code>synchronized</code>关键字对一个对象进行加锁，即可保证代码块在任意时刻最多只有一个线程能执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">    i = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用<code>synchronized</code>的时候，在代码块结束的时候都会正确释放锁，不必担心是否会出现异常</p><p>当然，这里的<code>lock</code> 可以是客户端锁（随便用一个对象作为锁，不推荐 –&gt; 代码逻辑容易混乱，也不利于封装）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以是内置锁（<code>this</code>即当前实例，每一个对象都有一个内置锁）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果锁住的是<code>this</code>实例时，等同于用<code>synchronized</code>修饰这个方法（这个方法就是同步方法，表示整个方法都必须用<code>this</code>加锁）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; <span class="comment">// 锁住this</span></span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="comment">// 解锁</span></span><br></pre></td></tr></table></figure><p>那如果这个方法是静态方法呢？静态方法是没有<code>this</code>实例的</p><p>这时其实锁住的是该类的<code>class</code>实例（类锁），相当于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(Student.class) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是，通过使用<code>synchronized</code>，最开始遇到的问题就可以得到解决了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            Counter.count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            Counter.count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>synchronized</code>去修饰着两个方法，结果就会正确了~</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>使用<code>synchronized</code>的时候，获取到的是哪个锁很重要，锁对象如果不对，代码逻辑就不对</p><p>另外还需要注意一些不需要<code>synchronized</code>的操作</p><p>JVM 规范定义了几种原子操作：</p><ul><li>基本类型（<code>long</code>和<code>double</code>除外）赋值（多行赋值语句必须保证是同步操作）</li><li>引用类型赋值</li></ul><p>这里<code>long</code>和<code>double</code>是64 位数据，但在x64 平台的JVM 是把<code>long</code>和<code>double</code>的赋值作为原子操作实现的，所以这个问题一般忽略</p><hr><p>使用<code>synchronized</code>解决了多线程同步访问共享变量的问题</p><p>但因为<code>synchronized</code>代码块无法并发执行，加锁和解锁需要消耗一定的时间，它也带来了性能的下降</p><blockquote><p>如果文章有什么不足，欢迎大家评论指出；如果本文对大家有什么帮助的话，也希望能点个赞，谢谢大家~</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java学习之synchronized锁&quot;&gt;&lt;a href=&quot;#Java学习之synchronized锁&quot; class=&quot;headerlink&quot; title=&quot;Java学习之synchronized锁&quot;&gt;&lt;/a&gt;Java学习之synchronized锁&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="-Java -锁" scheme="http://yoursite.com/tags/Java-%E9%94%81/"/>
    
  </entry>
  
</feed>
